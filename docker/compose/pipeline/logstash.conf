input {
	tcp {
		port => 5000
	}
	beats {
    	port => "${BEAT_PORT:5044}"
  	}
}

## Add your filters / logstash plugins configuration here
filter {
	if [type] == "log" {
        grok {
            match => { "message" => "%{WORD:ACTION},%{DATA:INSTALLATION_ID},%{INT:LOG_TIMESTAMP_SECONDS},%{INT:LOG_TIMESTAMP_FRACTIONS},%{DATA:LOG_TIMESTAMP},%{DATA:COMPONENT_NAME},%{WORD:THREAD_ID},%{INT:SEQUENCE_NUMBER},%{WORD:LOG_LEVEL_TYPE},%{DATA:LOGICAL_COMPONENT_NAME},%{WORD:MESSAGE_ID},%{QUOTEDSTRING:MESSAGE_TEXT},%{DATA:TRANSACTION_ID},%{DATA:LOG_TIMEZONE},%{WORD:IS_PRIORITY_MESSAGE}" }
        }
        if "_grokparsefailure" in [tags] {
        	drop {}
        } else {
            ruby {
                code => "event.set('FW_DATE',Time.at(event.get('LOG_TIMESTAMP_SECONDS').to_i).strftime('%Y.%m.%d'))"
            }
            if "_rubyexception" in [tags] {
                drop {}
            } else {
                ruby {
                     code => "event.set('CREATED_ON_DATE',event.get('LOG_TIMESTAMP_SECONDS'))
"               }
                if "_rubyexception" in [tags] {
                    drop {}
                } else {
                    mutate {
                        convert => {
                            "CREATED_ON_DATE" => "integer"
                            "LOG_TIMESTAMP_SECONDS" => "integer"
                            "LOG_TIMESTAMP_FRACTIONS" => "integer"
                            "SEQUENCE_NUMBER" => "integer" 
                            "IS_PRIORITY_MESSAGE" => "boolean" }
                    }
                    date {
                        match => ["CREATED_ON_DATE", "UNIX"]
                        target => "@timestamp"
                    }
                }
            }
        }                            
    } else if [type] == "stat" {
        grok {
            match => { "message" => "%{WORD:ACTION},%{WORD:DISCRIMINATOR},%{DATA:CHECKPOINT_ID},%{DATA:INSTALLATION_ID},%{INT:NUMERIC_VALUE},%{DATA:STRING_VALUE},%{DATA:COMPONENT_NAME},%{DATA:TRANSACTION_ID},%{INT:STATISTIC_DURATION},%{DATA:STATISTIC_NAME},%{DATA:ASSOCIATED_NAME},%{INT:SINGLE_LATENCY},%{INT:AVERAGE_LATENCY},%{INT:MAX_LATENCY},%{INT:MIN_LATENCY},%{INT:TPS},%{DATA:MAX_LATENCY_TRANSACTION_ID},%{INT:CREATED_ON_DATE},%{INT:TOTAL_TRANSACTIONS},%{DATA:PROCESS_NAME},%{INT:SLA1},%{INT:SLA2},%{INT:EXCEPTION_COUNT},%{WORD:CATEGORY},%{INT:P95},%{INT:P99},%{INT:P999},%{INT:P9999},%{INT:P99999}" }
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        } else {
            ruby {
                code => "event.set('FW_DATE',Time.at(event.get('CREATED_ON_DATE')[0..9].to_i).strftime('%Y.%m.%d'))"
            }
            if "_rubyexception" in [tags] {
                drop {}
            } else {
                mutate {
	 		       	convert => { "NUMERIC_VALUE" => "integer" "STATISTIC_DURATION" => "integer" 
        				 "SINGLE_LATENCY" => "integer" "AVERAGE_LATENCY" => "integer"
        				 "MAX_LATENCY" => "integer" "MIN_LATENCY" => "integer" "TPS" => "integer"
        	   			 "CREATED_ON_DATE" => "integer" "TOTAL_TRANSACTIONS" => "integer"
        	             "SLA1" => "integer" "SLA2" => "integer" "EXCEPTION_COUNT" => "integer"
        	             "P95" => "integer" "P99" => "integer" "P999" => "integer"
        	             "P9999" => "integer" "P99999" => "integer" }
                }
                date {
                    match => ["CREATED_ON_DATE", "UNIX_MS"]
                    target => "@timestamp"
                }
            }
        }
    }
	mutate
	{
    	remove_field => [ "message" ]
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		manage_template => false
   		document_type => "%{[@metadata][type]}"
	    index => "%{[@metadata][beat]}-%{type}-%{+YYYY.MM.dd}"
	}
}